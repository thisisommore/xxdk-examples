////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2022 xx foundation                                             //
//                                                                            //
// Use of this source code is governed by a license that can be found in the  //
// LICENSE file.                                                              //
////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: mixmessages.proto

package mixmessages

import (
	messages "gitlab.com/xx_network/comms/messages"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Salt used to generate the Client ID
	Salt []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	// NOTE: The following entry becomes a pointer to the blockchain that denotes
	// where to find the users public key. The node can then read the blockchain
	// and verify that the registration was done properly there.
	ClientTransmissionConfirmation *SignedRegistrationConfirmation `protobuf:"bytes,2,opt,name=ClientTransmissionConfirmation,proto3" json:"ClientTransmissionConfirmation,omitempty"`
	// the timestamp of this request,
	RequestTimestamp int64 `protobuf:"varint,3,opt,name=RequestTimestamp,proto3" json:"RequestTimestamp,omitempty"`
	// timestamp of registration, tied to ClientRegistrationConfirmation
	RegistrationTimestamp int64 `protobuf:"varint,4,opt,name=RegistrationTimestamp,proto3" json:"RegistrationTimestamp,omitempty"`
	// The public key of the client for the purposes of creating the diffie helman sesskey
	ClientDHPubKey []byte `protobuf:"bytes,5,opt,name=ClientDHPubKey,proto3" json:"ClientDHPubKey,omitempty"`
}

func (x *ClientKeyRequest) Reset() {
	*x = ClientKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientKeyRequest) ProtoMessage() {}

func (x *ClientKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientKeyRequest.ProtoReflect.Descriptor instead.
func (*ClientKeyRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{0}
}

func (x *ClientKeyRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ClientKeyRequest) GetClientTransmissionConfirmation() *SignedRegistrationConfirmation {
	if x != nil {
		return x.ClientTransmissionConfirmation
	}
	return nil
}

func (x *ClientKeyRequest) GetRequestTimestamp() int64 {
	if x != nil {
		return x.RequestTimestamp
	}
	return 0
}

func (x *ClientKeyRequest) GetRegistrationTimestamp() int64 {
	if x != nil {
		return x.RegistrationTimestamp
	}
	return 0
}

func (x *ClientKeyRequest) GetClientDHPubKey() []byte {
	if x != nil {
		return x.ClientDHPubKey
	}
	return nil
}

// SignedClientBatchKeyRequest is a message sent from client to a gateway,
// which will act as a proxy & send the registration request on to the
// IDs in Targets
type SignedClientBatchKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKeyRequest          []byte                 `protobuf:"bytes,1,opt,name=ClientKeyRequest,proto3" json:"ClientKeyRequest,omitempty"`
	ClientKeyRequestSignature *messages.RSASignature `protobuf:"bytes,2,opt,name=ClientKeyRequestSignature,proto3" json:"ClientKeyRequestSignature,omitempty"`
	Targets                   [][]byte               `protobuf:"bytes,3,rep,name=Targets,proto3" json:"Targets,omitempty"`
	Timeout                   uint64                 `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	UseSHA                    bool                   `protobuf:"varint,5,opt,name=UseSHA,proto3" json:"UseSHA,omitempty"`
}

func (x *SignedClientBatchKeyRequest) Reset() {
	*x = SignedClientBatchKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedClientBatchKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedClientBatchKeyRequest) ProtoMessage() {}

func (x *SignedClientBatchKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedClientBatchKeyRequest.ProtoReflect.Descriptor instead.
func (*SignedClientBatchKeyRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{1}
}

func (x *SignedClientBatchKeyRequest) GetClientKeyRequest() []byte {
	if x != nil {
		return x.ClientKeyRequest
	}
	return nil
}

func (x *SignedClientBatchKeyRequest) GetClientKeyRequestSignature() *messages.RSASignature {
	if x != nil {
		return x.ClientKeyRequestSignature
	}
	return nil
}

func (x *SignedClientBatchKeyRequest) GetTargets() [][]byte {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *SignedClientBatchKeyRequest) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SignedClientBatchKeyRequest) GetUseSHA() bool {
	if x != nil {
		return x.UseSHA
	}
	return false
}

type SignedClientKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wire serialized format of the ClientKeyRequest Object (above)
	ClientKeyRequest []byte `protobuf:"bytes,1,opt,name=ClientKeyRequest,proto3" json:"ClientKeyRequest,omitempty"`
	// RSA signature signed by the client
	ClientKeyRequestSignature *messages.RSASignature `protobuf:"bytes,2,opt,name=ClientKeyRequestSignature,proto3" json:"ClientKeyRequestSignature,omitempty"`
	// Target Gateway/Node - used to proxy through an alternate gateway
	Target []byte `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	// Use sha rather than blake for faster client-side signing
	UseSHA bool `protobuf:"varint,4,opt,name=UseSHA,proto3" json:"UseSHA,omitempty"`
}

func (x *SignedClientKeyRequest) Reset() {
	*x = SignedClientKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedClientKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedClientKeyRequest) ProtoMessage() {}

func (x *SignedClientKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedClientKeyRequest.ProtoReflect.Descriptor instead.
func (*SignedClientKeyRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{2}
}

func (x *SignedClientKeyRequest) GetClientKeyRequest() []byte {
	if x != nil {
		return x.ClientKeyRequest
	}
	return nil
}

func (x *SignedClientKeyRequest) GetClientKeyRequestSignature() *messages.RSASignature {
	if x != nil {
		return x.ClientKeyRequestSignature
	}
	return nil
}

func (x *SignedClientKeyRequest) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SignedClientKeyRequest) GetUseSHA() bool {
	if x != nil {
		return x.UseSHA
	}
	return false
}

type ClientKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedClientKey     []byte `protobuf:"bytes,1,opt,name=EncryptedClientKey,proto3" json:"EncryptedClientKey,omitempty"`
	EncryptedClientKeyHMAC []byte `protobuf:"bytes,2,opt,name=EncryptedClientKeyHMAC,proto3" json:"EncryptedClientKeyHMAC,omitempty"`
	NodeDHPubKey           []byte `protobuf:"bytes,3,opt,name=NodeDHPubKey,proto3" json:"NodeDHPubKey,omitempty"`
	KeyID                  []byte `protobuf:"bytes,4,opt,name=KeyID,proto3" json:"KeyID,omitempty"`            // Currently unused and empty.
	ValidUntil             uint64 `protobuf:"varint,5,opt,name=ValidUntil,proto3" json:"ValidUntil,omitempty"` // Timestamp of when the key expires
}

func (x *ClientKeyResponse) Reset() {
	*x = ClientKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientKeyResponse) ProtoMessage() {}

func (x *ClientKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientKeyResponse.ProtoReflect.Descriptor instead.
func (*ClientKeyResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{3}
}

func (x *ClientKeyResponse) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *ClientKeyResponse) GetEncryptedClientKeyHMAC() []byte {
	if x != nil {
		return x.EncryptedClientKeyHMAC
	}
	return nil
}

func (x *ClientKeyResponse) GetNodeDHPubKey() []byte {
	if x != nil {
		return x.NodeDHPubKey
	}
	return nil
}

func (x *ClientKeyResponse) GetKeyID() []byte {
	if x != nil {
		return x.KeyID
	}
	return nil
}

func (x *ClientKeyResponse) GetValidUntil() uint64 {
	if x != nil {
		return x.ValidUntil
	}
	return 0
}

// SignedBatchKeyResponse contains responses received from target gateways to
// the gateway which received the original SignedClientKeyRequest, to be
// returned to the client
type SignedBatchKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedKeys []*SignedKeyResponse `protobuf:"bytes,1,rep,name=SignedKeys,proto3" json:"SignedKeys,omitempty"`
}

func (x *SignedBatchKeyResponse) Reset() {
	*x = SignedBatchKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBatchKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBatchKeyResponse) ProtoMessage() {}

func (x *SignedBatchKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBatchKeyResponse.ProtoReflect.Descriptor instead.
func (*SignedBatchKeyResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{4}
}

func (x *SignedBatchKeyResponse) GetSignedKeys() []*SignedKeyResponse {
	if x != nil {
		return x.SignedKeys
	}
	return nil
}

type SignedKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyResponse                []byte                 `protobuf:"bytes,1,opt,name=KeyResponse,proto3" json:"KeyResponse,omitempty"`
	KeyResponseSignedByGateway *messages.RSASignature `protobuf:"bytes,2,opt,name=KeyResponseSignedByGateway,proto3" json:"KeyResponseSignedByGateway,omitempty"`
	ClientGatewayKey           []byte                 `protobuf:"bytes,3,opt,name=ClientGatewayKey,proto3" json:"ClientGatewayKey,omitempty"` // Stripped off by node gateway
	Error                      string                 `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *SignedKeyResponse) Reset() {
	*x = SignedKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedKeyResponse) ProtoMessage() {}

func (x *SignedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedKeyResponse.ProtoReflect.Descriptor instead.
func (*SignedKeyResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{5}
}

func (x *SignedKeyResponse) GetKeyResponse() []byte {
	if x != nil {
		return x.KeyResponse
	}
	return nil
}

func (x *SignedKeyResponse) GetKeyResponseSignedByGateway() *messages.RSASignature {
	if x != nil {
		return x.KeyResponseSignedByGateway
	}
	return nil
}

func (x *SignedKeyResponse) GetClientGatewayKey() []byte {
	if x != nil {
		return x.ClientGatewayKey
	}
	return nil
}

func (x *SignedKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PostPrecompResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId  uint64 `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	NumSlots uint32 `protobuf:"varint,2,opt,name=NumSlots,proto3" json:"NumSlots,omitempty"`
}

func (x *PostPrecompResult) Reset() {
	*x = PostPrecompResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPrecompResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPrecompResult) ProtoMessage() {}

func (x *PostPrecompResult) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPrecompResult.ProtoReflect.Descriptor instead.
func (*PostPrecompResult) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{6}
}

func (x *PostPrecompResult) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *PostPrecompResult) GetNumSlots() uint32 {
	if x != nil {
		return x.NumSlots
	}
	return 0
}

// RoundInfo contains the # of precomputations ready for messages, among other
// information
type RoundBufferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundBufferSize uint32 `protobuf:"varint,1,opt,name=RoundBufferSize,proto3" json:"RoundBufferSize,omitempty"`
}

func (x *RoundBufferInfo) Reset() {
	*x = RoundBufferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundBufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundBufferInfo) ProtoMessage() {}

func (x *RoundBufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundBufferInfo.ProtoReflect.Descriptor instead.
func (*RoundBufferInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{7}
}

func (x *RoundBufferInfo) GetRoundBufferSize() uint32 {
	if x != nil {
		return x.RoundBufferSize
	}
	return 0
}

type RoundPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Key   []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *RoundPublicKey) Reset() {
	*x = RoundPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPublicKey) ProtoMessage() {}

func (x *RoundPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPublicKey.ProtoReflect.Descriptor instead.
func (*RoundPublicKey) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{8}
}

func (x *RoundPublicKey) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *RoundPublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type RoundMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundMetricJSON string `protobuf:"bytes,1,opt,name=RoundMetricJSON,proto3" json:"RoundMetricJSON,omitempty"`
}

func (x *RoundMetrics) Reset() {
	*x = RoundMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMetrics) ProtoMessage() {}

func (x *RoundMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMetrics.ProtoReflect.Descriptor instead.
func (*RoundMetrics) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{9}
}

func (x *RoundMetrics) GetRoundMetricJSON() string {
	if x != nil {
		return x.RoundMetricJSON
	}
	return ""
}

// Contains the complete set of messages/slots for a round
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	Slots     []*Slot    `protobuf:"bytes,3,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{10}
}

func (x *Batch) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *Batch) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *Batch) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CompletedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID uint64  `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Slots   []*Slot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *CompletedBatch) Reset() {
	*x = CompletedBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletedBatch) ProtoMessage() {}

func (x *CompletedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletedBatch.ProtoReflect.Descriptor instead.
func (*CompletedBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{11}
}

func (x *CompletedBatch) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *CompletedBatch) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// Used as part of header for streaming slots
type BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     *RoundInfo `protobuf:"bytes,1,opt,name=Round,proto3" json:"Round,omitempty"`
	FromPhase int32      `protobuf:"varint,2,opt,name=FromPhase,proto3" json:"FromPhase,omitempty"`
	BatchSize uint32     `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *BatchInfo) Reset() {
	*x = BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfo) ProtoMessage() {}

func (x *BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfo.ProtoReflect.Descriptor instead.
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{12}
}

func (x *BatchInfo) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *BatchInfo) GetFromPhase() int32 {
	if x != nil {
		return x.FromPhase
	}
	return 0
}

func (x *BatchInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Used for collecting metrics on a round trip of the system
type RoundTripPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *anypb.Any `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Round   *RoundInfo `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (x *RoundTripPing) Reset() {
	*x = RoundTripPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundTripPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundTripPing) ProtoMessage() {}

func (x *RoundTripPing) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundTripPing.ProtoReflect.Descriptor instead.
func (*RoundTripPing) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{13}
}

func (x *RoundTripPing) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RoundTripPing) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

// Unified Gateway->Server polling message
type ServerPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full           *NDFHash `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial        *NDFHash `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate     uint64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Error          string   `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
	GatewayVersion string   `protobuf:"bytes,5,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	GatewayAddress string   `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
}

func (x *ServerPoll) Reset() {
	*x = ServerPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPoll) ProtoMessage() {}

func (x *ServerPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPoll.ProtoReflect.Descriptor instead.
func (*ServerPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{14}
}

func (x *ServerPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *ServerPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *ServerPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ServerPoll) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ServerPoll) GetGatewayVersion() string {
	if x != nil {
		return x.GatewayVersion
	}
	return ""
}

func (x *ServerPoll) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

// Unified Gateway->Server polling response
type ServerPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     []byte       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FullNDF                *NDF         `protobuf:"bytes,2,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`           //Empty if no update needed
	PartialNDF             *NDF         `protobuf:"bytes,3,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`     //Empty if no update needed
	Updates                []*RoundInfo `protobuf:"bytes,4,rep,name=Updates,proto3" json:"Updates,omitempty"`           //Empty if no update needed
	BatchRequest           *RoundInfo   `protobuf:"bytes,5,opt,name=BatchRequest,proto3" json:"BatchRequest,omitempty"` //Empty if no update needed
	Batch                  *BatchReady  `protobuf:"bytes,6,opt,name=Batch,proto3" json:"Batch,omitempty"`
	EarliestClientRound    uint64       `protobuf:"varint,7,opt,name=EarliestClientRound,proto3" json:"EarliestClientRound,omitempty"`
	EarliestGatewayRound   uint64       `protobuf:"varint,8,opt,name=EarliestGatewayRound,proto3" json:"EarliestGatewayRound,omitempty"`     // Earliest round to track for gateways
	EarliestRoundTimestamp int64        `protobuf:"varint,9,opt,name=EarliestRoundTimestamp,proto3" json:"EarliestRoundTimestamp,omitempty"` // The timestamp associated with the earliest the gateway still has info for
	EarliestRoundErr       string       `protobuf:"bytes,10,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
}

func (x *ServerPollResponse) Reset() {
	*x = ServerPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPollResponse) ProtoMessage() {}

func (x *ServerPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPollResponse.ProtoReflect.Descriptor instead.
func (*ServerPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{15}
}

func (x *ServerPollResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServerPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *ServerPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *ServerPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ServerPollResponse) GetBatchRequest() *RoundInfo {
	if x != nil {
		return x.BatchRequest
	}
	return nil
}

func (x *ServerPollResponse) GetBatch() *BatchReady {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *ServerPollResponse) GetEarliestClientRound() uint64 {
	if x != nil {
		return x.EarliestClientRound
	}
	return 0
}

func (x *ServerPollResponse) GetEarliestGatewayRound() uint64 {
	if x != nil {
		return x.EarliestGatewayRound
	}
	return 0
}

func (x *ServerPollResponse) GetEarliestRoundTimestamp() int64 {
	if x != nil {
		return x.EarliestRoundTimestamp
	}
	return 0
}

func (x *ServerPollResponse) GetEarliestRoundErr() string {
	if x != nil {
		return x.EarliestRoundErr
	}
	return ""
}

type BatchReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId uint64 `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
}

func (x *BatchReady) Reset() {
	*x = BatchReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReady) ProtoMessage() {}

func (x *BatchReady) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReady.ProtoReflect.Descriptor instead.
func (*BatchReady) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{16}
}

func (x *BatchReady) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

// Used as part of Share phase for generation
// of a multi-party Diffie-Helman key
// Node <-> Node message
type SharePiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Piece        []byte                 `protobuf:"bytes,1,opt,name=Piece,proto3" json:"Piece,omitempty"`               // In progress round public key
	Participants [][]byte               `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"` // List of nodes who have participated
	RoundID      uint64                 `protobuf:"varint,3,opt,name=roundID,proto3" json:"roundID,omitempty"`          // Id of round tied to round key generation
	Signature    *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`       // Signature tied to message sent by node
}

func (x *SharePiece) Reset() {
	*x = SharePiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePiece) ProtoMessage() {}

func (x *SharePiece) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePiece.ProtoReflect.Descriptor instead.
func (*SharePiece) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{17}
}

func (x *SharePiece) GetPiece() []byte {
	if x != nil {
		return x.Piece
	}
	return nil
}

func (x *SharePiece) GetParticipants() [][]byte {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *SharePiece) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *SharePiece) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RequestGatewayCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestGatewayCert) Reset() {
	*x = RequestGatewayCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGatewayCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGatewayCert) ProtoMessage() {}

func (x *RequestGatewayCert) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGatewayCert.ProtoReflect.Descriptor instead.
func (*RequestGatewayCert) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{18}
}

type GatewayCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Signature   []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GatewayCertificate) Reset() {
	*x = GatewayCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCertificate) ProtoMessage() {}

func (x *GatewayCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCertificate.ProtoReflect.Descriptor instead.
func (*GatewayCertificate) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{19}
}

func (x *GatewayCertificate) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *GatewayCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// StreamChunk represents a part of a response, to be streamed in chunks
// for bandwidth efficiency.
type StreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum []byte `protobuf:"bytes,1,opt,name=Datum,proto3" json:"Datum,omitempty"`
}

func (x *StreamChunk) Reset() {
	*x = StreamChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChunk) ProtoMessage() {}

func (x *StreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChunk.ProtoReflect.Descriptor instead.
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{20}
}

func (x *StreamChunk) GetDatum() []byte {
	if x != nil {
		return x.Datum
	}
	return nil
}

// Client -> Gateway request for information about historical rounds
type HistoricalRounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []uint64 `protobuf:"varint,1,rep,packed,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *HistoricalRounds) Reset() {
	*x = HistoricalRounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRounds) ProtoMessage() {}

func (x *HistoricalRounds) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRounds.ProtoReflect.Descriptor instead.
func (*HistoricalRounds) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{21}
}

func (x *HistoricalRounds) GetRounds() []uint64 {
	if x != nil {
		return x.Rounds
	}
	return nil
}

// Gateway's response to client's request for previous (historical) rounds
type HistoricalRoundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []*RoundInfo `protobuf:"bytes,1,rep,name=Rounds,proto3" json:"Rounds,omitempty"`
}

func (x *HistoricalRoundsResponse) Reset() {
	*x = HistoricalRoundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRoundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRoundsResponse) ProtoMessage() {}

func (x *HistoricalRoundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRoundsResponse.ProtoReflect.Descriptor instead.
func (*HistoricalRoundsResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{22}
}

func (x *HistoricalRoundsResponse) GetRounds() []*RoundInfo {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type GetMessagesBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*GetMessages `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
	Timeout  uint64         `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
}

func (x *GetMessagesBatch) Reset() {
	*x = GetMessagesBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesBatch) ProtoMessage() {}

func (x *GetMessagesBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesBatch.ProtoReflect.Descriptor instead.
func (*GetMessagesBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{23}
}

func (x *GetMessagesBatch) GetRequests() []*GetMessages {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetMessagesBatch) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GetMessagesResponseBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetMessagesResponse `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	Errors  []string               `protobuf:"bytes,3,rep,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *GetMessagesResponseBatch) Reset() {
	*x = GetMessagesResponseBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesResponseBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponseBatch) ProtoMessage() {}

func (x *GetMessagesResponseBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponseBatch.ProtoReflect.Descriptor instead.
func (*GetMessagesResponseBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{24}
}

func (x *GetMessagesResponseBatch) GetResults() []*GetMessagesResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetMessagesResponseBatch) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Client -> Gateway request for available messages
// The query will be a request for all messages
// available in a round.
type GetMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID []byte `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	RoundID  uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target   []byte `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
}

func (x *GetMessages) Reset() {
	*x = GetMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessages) ProtoMessage() {}

func (x *GetMessages) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessages.ProtoReflect.Descriptor instead.
func (*GetMessages) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{25}
}

func (x *GetMessages) GetClientID() []byte {
	if x != nil {
		return x.ClientID
	}
	return nil
}

func (x *GetMessages) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GetMessages) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

// Gateway response to a GetMessages request
type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Slot `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	HasRound bool    `protobuf:"varint,2,opt,name=HasRound,proto3" json:"HasRound,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{26}
}

func (x *GetMessagesResponse) GetMessages() []*Slot {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetMessagesResponse) GetHasRound() bool {
	if x != nil {
		return x.HasRound
	}
	return false
}

// Gateway -> Gateway message sharing within a team
type RoundMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId  uint64  `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
	Messages []*Slot `protobuf:"bytes,2,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *RoundMessages) Reset() {
	*x = RoundMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMessages) ProtoMessage() {}

func (x *RoundMessages) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMessages.ProtoReflect.Descriptor instead.
func (*RoundMessages) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{27}
}

func (x *RoundMessages) GetRoundId() uint64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundMessages) GetMessages() []*Slot {
	if x != nil {
		return x.Messages
	}
	return nil
}

// The message for clients to poll the gateway for Message IDs
type IDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *IDList) Reset() {
	*x = IDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDList) ProtoMessage() {}

func (x *IDList) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDList.ProtoReflect.Descriptor instead.
func (*IDList) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{28}
}

func (x *IDList) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

// Represents a single encrypted message in a batch
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index in batch this slot belongs in
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// Precomputation fields
	EncryptedPayloadAKeys       []byte `protobuf:"bytes,2,opt,name=EncryptedPayloadAKeys,proto3" json:"EncryptedPayloadAKeys,omitempty"`
	EncryptedPayloadBKeys       []byte `protobuf:"bytes,3,opt,name=EncryptedPayloadBKeys,proto3" json:"EncryptedPayloadBKeys,omitempty"`
	PartialPayloadACypherText   []byte `protobuf:"bytes,4,opt,name=PartialPayloadACypherText,proto3" json:"PartialPayloadACypherText,omitempty"`
	PartialPayloadBCypherText   []byte `protobuf:"bytes,5,opt,name=PartialPayloadBCypherText,proto3" json:"PartialPayloadBCypherText,omitempty"`
	PartialRoundPublicCypherKey []byte `protobuf:"bytes,6,opt,name=PartialRoundPublicCypherKey,proto3" json:"PartialRoundPublicCypherKey,omitempty"`
	// Realtime/client fields
	SenderID      []byte   `protobuf:"bytes,7,opt,name=SenderID,proto3" json:"SenderID,omitempty"`                    // 256 bit Sender Id
	PayloadA      []byte   `protobuf:"bytes,8,opt,name=PayloadA,proto3" json:"PayloadA,omitempty"`                    // Len(Prime) bit length payload A (contains part of encrypted payload)
	PayloadB      []byte   `protobuf:"bytes,9,opt,name=PayloadB,proto3" json:"PayloadB,omitempty"`                    // Len(Prime) bit length payload B (contains part of encrypted payload, and associated data)
	Salt          []byte   `protobuf:"bytes,10,opt,name=Salt,proto3" json:"Salt,omitempty"`                           // Salt to identify message key
	KMACs         [][]byte `protobuf:"bytes,11,rep,name=KMACs,proto3" json:"KMACs,omitempty"`                         // Individual Key MAC for each node in network
	Ed25519       []byte   `protobuf:"bytes,12,opt,name=Ed25519,proto3" json:"Ed25519,omitempty"`                     // Client ephemeral ed25519 key, if applicable
	EphemeralKeys []bool   `protobuf:"varint,13,rep,packed,name=EphemeralKeys,proto3" json:"EphemeralKeys,omitempty"` // true for each node which used ephemeral key generation
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{29}
}

func (x *Slot) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Slot) GetEncryptedPayloadAKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadAKeys
	}
	return nil
}

func (x *Slot) GetEncryptedPayloadBKeys() []byte {
	if x != nil {
		return x.EncryptedPayloadBKeys
	}
	return nil
}

func (x *Slot) GetPartialPayloadACypherText() []byte {
	if x != nil {
		return x.PartialPayloadACypherText
	}
	return nil
}

func (x *Slot) GetPartialPayloadBCypherText() []byte {
	if x != nil {
		return x.PartialPayloadBCypherText
	}
	return nil
}

func (x *Slot) GetPartialRoundPublicCypherKey() []byte {
	if x != nil {
		return x.PartialRoundPublicCypherKey
	}
	return nil
}

func (x *Slot) GetSenderID() []byte {
	if x != nil {
		return x.SenderID
	}
	return nil
}

func (x *Slot) GetPayloadA() []byte {
	if x != nil {
		return x.PayloadA
	}
	return nil
}

func (x *Slot) GetPayloadB() []byte {
	if x != nil {
		return x.PayloadB
	}
	return nil
}

func (x *Slot) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Slot) GetKMACs() [][]byte {
	if x != nil {
		return x.KMACs
	}
	return nil
}

func (x *Slot) GetEd25519() []byte {
	if x != nil {
		return x.Ed25519
	}
	return nil
}

func (x *Slot) GetEphemeralKeys() []bool {
	if x != nil {
		return x.EphemeralKeys
	}
	return nil
}

// Unified Client->Gateway polling message
type GatewayPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partial     *NDFHash `protobuf:"bytes,1,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate  uint64   `protobuf:"varint,2,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	ReceptionID []byte   `protobuf:"bytes,3,opt,name=ReceptionID,proto3" json:"ReceptionID,omitempty"`
	// Define range for ClientBloomFilter searches
	StartTimestamp int64  `protobuf:"varint,4,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	EndTimestamp   int64  `protobuf:"varint,5,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	ClientVersion  []byte `protobuf:"bytes,6,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	// Determines whether client gets filtered network
	// updates or all updates.
	// If true, filtered updates relevant to client (FAILED, COMPLETED, QUEUED)
	// If false, all updates from the network
	FastPolling bool   `protobuf:"varint,7,opt,name=FastPolling,proto3" json:"FastPolling,omitempty"`
	LastRound   uint64 `protobuf:"varint,8,opt,name=LastRound,proto3" json:"LastRound,omitempty"`
	// When set to true, the gateway will not get new NDFs and network round
	// updates. This variable is added as the last field to be backward
	// compatible. If it is not included, then the field defaults to false and
	// will return all updates.
	DisableUpdates bool `protobuf:"varint,9,opt,name=DisableUpdates,proto3" json:"DisableUpdates,omitempty"`
}

func (x *GatewayPoll) Reset() {
	*x = GatewayPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPoll) ProtoMessage() {}

func (x *GatewayPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPoll.ProtoReflect.Descriptor instead.
func (*GatewayPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{30}
}

func (x *GatewayPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *GatewayPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *GatewayPoll) GetReceptionID() []byte {
	if x != nil {
		return x.ReceptionID
	}
	return nil
}

func (x *GatewayPoll) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *GatewayPoll) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *GatewayPoll) GetClientVersion() []byte {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *GatewayPoll) GetFastPolling() bool {
	if x != nil {
		return x.FastPolling
	}
	return false
}

func (x *GatewayPoll) GetLastRound() uint64 {
	if x != nil {
		return x.LastRound
	}
	return 0
}

func (x *GatewayPoll) GetDisableUpdates() bool {
	if x != nil {
		return x.DisableUpdates
	}
	return false
}

// Unified Client->Gateway polling response
type GatewayPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialNDF       *NDF          `protobuf:"bytes,1,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`        // Empty if no update needed
	Updates          []*RoundInfo  `protobuf:"bytes,2,rep,name=Updates,proto3" json:"Updates,omitempty"`              // Empty if no update needed
	KnownRounds      []byte        `protobuf:"bytes,3,opt,name=KnownRounds,proto3" json:"KnownRounds,omitempty"`      // Rounds gateway knows about
	Filters          *ClientBlooms `protobuf:"bytes,4,opt,name=Filters,proto3" json:"Filters,omitempty"`              // Set of ClientBloomFilters requested by Client
	EarliestRound    uint64        `protobuf:"varint,5,opt,name=EarliestRound,proto3" json:"EarliestRound,omitempty"` // The earliest round the gateway still has info for
	EarliestRoundErr string        `protobuf:"bytes,6,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
	// The following are used for the homebrew clock offset system in Client
	ReceivedTs   int64 `protobuf:"varint,7,opt,name=ReceivedTs,proto3" json:"ReceivedTs,omitempty"`     // Timestamp that Gateway received GatewayPoll
	GatewayDelay int64 `protobuf:"varint,8,opt,name=GatewayDelay,proto3" json:"GatewayDelay,omitempty"` // Duration of the Gateway Poll() function
}

func (x *GatewayPollResponse) Reset() {
	*x = GatewayPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPollResponse) ProtoMessage() {}

func (x *GatewayPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPollResponse.ProtoReflect.Descriptor instead.
func (*GatewayPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{31}
}

func (x *GatewayPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *GatewayPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *GatewayPollResponse) GetKnownRounds() []byte {
	if x != nil {
		return x.KnownRounds
	}
	return nil
}

func (x *GatewayPollResponse) GetFilters() *ClientBlooms {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GatewayPollResponse) GetEarliestRound() uint64 {
	if x != nil {
		return x.EarliestRound
	}
	return 0
}

func (x *GatewayPollResponse) GetEarliestRoundErr() string {
	if x != nil {
		return x.EarliestRoundErr
	}
	return ""
}

func (x *GatewayPollResponse) GetReceivedTs() int64 {
	if x != nil {
		return x.ReceivedTs
	}
	return 0
}

func (x *GatewayPollResponse) GetGatewayDelay() int64 {
	if x != nil {
		return x.GatewayDelay
	}
	return 0
}

// Holds a set of ClientBloom and their associated metadata
type ClientBlooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period         int64          `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	FirstTimestamp int64          `protobuf:"varint,2,opt,name=FirstTimestamp,proto3" json:"FirstTimestamp,omitempty"` // Earliest timestamp of the included BloomFilters
	Filters        []*ClientBloom `protobuf:"bytes,3,rep,name=Filters,proto3" json:"Filters,omitempty"`
}

func (x *ClientBlooms) Reset() {
	*x = ClientBlooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBlooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBlooms) ProtoMessage() {}

func (x *ClientBlooms) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBlooms.ProtoReflect.Descriptor instead.
func (*ClientBlooms) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{32}
}

func (x *ClientBlooms) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ClientBlooms) GetFirstTimestamp() int64 {
	if x != nil {
		return x.FirstTimestamp
	}
	return 0
}

func (x *ClientBlooms) GetFilters() []*ClientBloom {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Hold a ClientBloomFilter and its associated metadata
type ClientBloom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     []byte `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	FirstRound uint64 `protobuf:"varint,2,opt,name=FirstRound,proto3" json:"FirstRound,omitempty"`
	RoundRange uint32 `protobuf:"varint,3,opt,name=RoundRange,proto3" json:"RoundRange,omitempty"`
}

func (x *ClientBloom) Reset() {
	*x = ClientBloom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBloom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBloom) ProtoMessage() {}

func (x *ClientBloom) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBloom.ProtoReflect.Descriptor instead.
func (*ClientBloom) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{33}
}

func (x *ClientBloom) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ClientBloom) GetFirstRound() uint64 {
	if x != nil {
		return x.FirstRound
	}
	return 0
}

func (x *ClientBloom) GetRoundRange() uint32 {
	if x != nil {
		return x.RoundRange
	}
	return 0
}

// Client -> Gateway authentication message
type GatewaySlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*GatewaySlot `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	// Below should have same values as all elements in slice (this is assumed)
	RoundID uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Target  []byte `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	IpAddr  string `protobuf:"bytes,4,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"` // IpAddr of client
}

func (x *GatewaySlots) Reset() {
	*x = GatewaySlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlots) ProtoMessage() {}

func (x *GatewaySlots) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlots.ProtoReflect.Descriptor instead.
func (*GatewaySlots) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{34}
}

func (x *GatewaySlots) GetMessages() []*GatewaySlot {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GatewaySlots) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GatewaySlots) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GatewaySlots) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

// Client -> Gateway authentication message
type GatewaySlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Slot  `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	RoundID uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	MAC     []byte `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	Target  []byte `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`
	IpAddr  string `protobuf:"bytes,5,opt,name=IpAddr,proto3" json:"IpAddr,omitempty"` // IpAddr of client
}

func (x *GatewaySlot) Reset() {
	*x = GatewaySlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlot) ProtoMessage() {}

func (x *GatewaySlot) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlot.ProtoReflect.Descriptor instead.
func (*GatewaySlot) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{35}
}

func (x *GatewaySlot) GetMessage() *Slot {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GatewaySlot) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *GatewaySlot) GetMAC() []byte {
	if x != nil {
		return x.MAC
	}
	return nil
}

func (x *GatewaySlot) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GatewaySlot) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

// Gateway -> Client authentication response
type GatewaySlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	RoundID  uint64 `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
}

func (x *GatewaySlotResponse) Reset() {
	*x = GatewaySlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySlotResponse) ProtoMessage() {}

func (x *GatewaySlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySlotResponse.ProtoReflect.Descriptor instead.
func (*GatewaySlotResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{36}
}

func (x *GatewaySlotResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *GatewaySlotResponse) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

// Gateway -> Gateway gossip of all Sender IDs in a Batch
type BatchSenders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderIds [][]byte `protobuf:"bytes,1,rep,name=SenderIds,proto3" json:"SenderIds,omitempty"`
	RoundID   uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Ips       [][]byte `protobuf:"bytes,3,rep,name=Ips,proto3" json:"Ips,omitempty"`
}

func (x *BatchSenders) Reset() {
	*x = BatchSenders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSenders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSenders) ProtoMessage() {}

func (x *BatchSenders) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSenders.ProtoReflect.Descriptor instead.
func (*BatchSenders) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{37}
}

func (x *BatchSenders) GetSenderIds() [][]byte {
	if x != nil {
		return x.SenderIds
	}
	return nil
}

func (x *BatchSenders) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *BatchSenders) GetIps() [][]byte {
	if x != nil {
		return x.Ips
	}
	return nil
}

// Gateway -> Gateway gossip of all recipient IDs in a Batch
type Recipients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientIds [][]byte `protobuf:"bytes,1,rep,name=RecipientIds,proto3" json:"RecipientIds,omitempty"`
	RoundID      uint64   `protobuf:"varint,2,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	RoundTS      uint64   `protobuf:"varint,3,opt,name=RoundTS,proto3" json:"RoundTS,omitempty"`
}

func (x *Recipients) Reset() {
	*x = Recipients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipients) ProtoMessage() {}

func (x *Recipients) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipients.ProtoReflect.Descriptor instead.
func (*Recipients) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{38}
}

func (x *Recipients) GetRecipientIds() [][]byte {
	if x != nil {
		return x.RecipientIds
	}
	return nil
}

func (x *Recipients) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *Recipients) GetRoundTS() uint64 {
	if x != nil {
		return x.RoundTS
	}
	return 0
}

// Server -> Permissioning message for whether a node has been registered
type RegisteredNodeConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRegistered bool `protobuf:"varint,1,opt,name=IsRegistered,proto3" json:"IsRegistered,omitempty"`
}

func (x *RegisteredNodeConfirmation) Reset() {
	*x = RegisteredNodeConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredNodeConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredNodeConfirmation) ProtoMessage() {}

func (x *RegisteredNodeConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredNodeConfirmation.ProtoReflect.Descriptor instead.
func (*RegisteredNodeConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{39}
}

func (x *RegisteredNodeConfirmation) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

type RegisteredNodeCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RegisteredNodeCheck) Reset() {
	*x = RegisteredNodeCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredNodeCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredNodeCheck) ProtoMessage() {}

func (x *RegisteredNodeCheck) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredNodeCheck.ProtoReflect.Descriptor instead.
func (*RegisteredNodeCheck) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{40}
}

func (x *RegisteredNodeCheck) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

// The ndf Hash used to compare ndf on permissioning and client
type NDFHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *NDFHash) Reset() {
	*x = NDFHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDFHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDFHash) ProtoMessage() {}

func (x *NDFHash) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDFHash.ProtoReflect.Descriptor instead.
func (*NDFHash) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{41}
}

func (x *NDFHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// The Network Definition File is defined as a
// JSON structure in primitives/ndf. Can be provided in a
// "complete" and "incomplete" format. An incomplete
// NDF is provided to level 4 (ie clients) to protect the inner levels
type NDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ndf       []byte                 `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
	Signature *messages.RSASignature `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *NDF) Reset() {
	*x = NDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDF) ProtoMessage() {}

func (x *NDF) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDF.ProtoReflect.Descriptor instead.
func (*NDF) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{42}
}

func (x *NDF) GetNdf() []byte {
	if x != nil {
		return x.Ndf
	}
	return nil
}

func (x *NDF) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// NodeRegistration contains information to register a node.
// Note: this includes the desired server and gateway addresses.
// The registration server is free to ignore these addresses and
// derive the address from the network connection.
type NodeRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt             []byte `protobuf:"bytes,1,opt,name=Salt,proto3" json:"Salt,omitempty"`
	ServerTlsCert    string `protobuf:"bytes,2,opt,name=ServerTlsCert,proto3" json:"ServerTlsCert,omitempty"`
	ServerAddress    string `protobuf:"bytes,3,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	ServerPort       uint32 `protobuf:"varint,4,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"` // Note: there is no uint16
	GatewayTlsCert   string `protobuf:"bytes,5,opt,name=GatewayTlsCert,proto3" json:"GatewayTlsCert,omitempty"`
	GatewayAddress   string `protobuf:"bytes,6,opt,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	GatewayPort      uint32 `protobuf:"varint,7,opt,name=GatewayPort,proto3" json:"GatewayPort,omitempty"` // Note: there is no uint16
	RegistrationCode string `protobuf:"bytes,8,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
}

func (x *NodeRegistration) Reset() {
	*x = NodeRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistration) ProtoMessage() {}

func (x *NodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistration.ProtoReflect.Descriptor instead.
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{43}
}

func (x *NodeRegistration) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *NodeRegistration) GetServerTlsCert() string {
	if x != nil {
		return x.ServerTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *NodeRegistration) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *NodeRegistration) GetGatewayTlsCert() string {
	if x != nil {
		return x.GatewayTlsCert
	}
	return ""
}

func (x *NodeRegistration) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *NodeRegistration) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *NodeRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

// UserRegistration message to initialize registration process
// Client -> ClientRegistrar
type ClientRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationCode            string `protobuf:"bytes,1,opt,name=RegistrationCode,proto3" json:"RegistrationCode,omitempty"`
	ClientTransmissionRSAPubKey string `protobuf:"bytes,2,opt,name=ClientTransmissionRSAPubKey,proto3" json:"ClientTransmissionRSAPubKey,omitempty"`
	ClientReceptionRSAPubKey    string `protobuf:"bytes,3,opt,name=ClientReceptionRSAPubKey,proto3" json:"ClientReceptionRSAPubKey,omitempty"`
}

func (x *ClientRegistration) Reset() {
	*x = ClientRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegistration) ProtoMessage() {}

func (x *ClientRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegistration.ProtoReflect.Descriptor instead.
func (*ClientRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{44}
}

func (x *ClientRegistration) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

func (x *ClientRegistration) GetClientTransmissionRSAPubKey() string {
	if x != nil {
		return x.ClientTransmissionRSAPubKey
	}
	return ""
}

func (x *ClientRegistration) GetClientReceptionRSAPubKey() string {
	if x != nil {
		return x.ClientReceptionRSAPubKey
	}
	return ""
}

// ClientRegistrationConfirmation to confirm registration with Clients
// ClientRegistrar -> Client (Response to ClientRegistration)
type ClientRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RSAPubKey string `protobuf:"bytes,1,opt,name=RSAPubKey,proto3" json:"RSAPubKey,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ClientRegistrationConfirmation) Reset() {
	*x = ClientRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegistrationConfirmation) ProtoMessage() {}

func (x *ClientRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*ClientRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{45}
}

func (x *ClientRegistrationConfirmation) GetRSAPubKey() string {
	if x != nil {
		return x.RSAPubKey
	}
	return ""
}

func (x *ClientRegistrationConfirmation) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SignedRegistrationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientRegistrationConfirmation []byte                 `protobuf:"bytes,1,opt,name=ClientRegistrationConfirmation,proto3" json:"ClientRegistrationConfirmation,omitempty"`
	RegistrarSignature             *messages.RSASignature `protobuf:"bytes,2,opt,name=RegistrarSignature,proto3" json:"RegistrarSignature,omitempty"`
}

func (x *SignedRegistrationConfirmation) Reset() {
	*x = SignedRegistrationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedRegistrationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedRegistrationConfirmation) ProtoMessage() {}

func (x *SignedRegistrationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedRegistrationConfirmation.ProtoReflect.Descriptor instead.
func (*SignedRegistrationConfirmation) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{46}
}

func (x *SignedRegistrationConfirmation) GetClientRegistrationConfirmation() []byte {
	if x != nil {
		return x.ClientRegistrationConfirmation
	}
	return nil
}

func (x *SignedRegistrationConfirmation) GetRegistrarSignature() *messages.RSASignature {
	if x != nil {
		return x.RegistrarSignature
	}
	return nil
}

type SignedClientRegistrationConfirmations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTransmissionConfirmation *SignedRegistrationConfirmation `protobuf:"bytes,1,opt,name=ClientTransmissionConfirmation,proto3" json:"ClientTransmissionConfirmation,omitempty"`
	ClientReceptionConfirmation    *SignedRegistrationConfirmation `protobuf:"bytes,2,opt,name=ClientReceptionConfirmation,proto3" json:"ClientReceptionConfirmation,omitempty"`
	Error                          string                          `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *SignedClientRegistrationConfirmations) Reset() {
	*x = SignedClientRegistrationConfirmations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedClientRegistrationConfirmations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedClientRegistrationConfirmations) ProtoMessage() {}

func (x *SignedClientRegistrationConfirmations) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedClientRegistrationConfirmations.ProtoReflect.Descriptor instead.
func (*SignedClientRegistrationConfirmations) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{47}
}

func (x *SignedClientRegistrationConfirmations) GetClientTransmissionConfirmation() *SignedRegistrationConfirmation {
	if x != nil {
		return x.ClientTransmissionConfirmation
	}
	return nil
}

func (x *SignedClientRegistrationConfirmations) GetClientReceptionConfirmation() *SignedRegistrationConfirmation {
	if x != nil {
		return x.ClientReceptionConfirmation
	}
	return nil
}

func (x *SignedClientRegistrationConfirmations) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ClientVersion contains a version string for the client
type ClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *ClientVersion) Reset() {
	*x = ClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientVersion) ProtoMessage() {}

func (x *ClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientVersion.ProtoReflect.Descriptor instead.
func (*ClientVersion) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{48}
}

func (x *ClientVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Unified Server->Permissioning polling message
type PermissioningPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full           *NDFHash       `protobuf:"bytes,1,opt,name=Full,proto3" json:"Full,omitempty"`
	Partial        *NDFHash       `protobuf:"bytes,2,opt,name=Partial,proto3" json:"Partial,omitempty"`
	LastUpdate     uint64         `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
	Activity       uint32         `protobuf:"varint,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Error          *RoundError    `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"` // Only Populated in the event of errors
	GatewayAddress string         `protobuf:"bytes,6,opt,name=gatewayAddress,proto3" json:"gatewayAddress,omitempty"`
	GatewayVersion string         `protobuf:"bytes,7,opt,name=gatewayVersion,proto3" json:"gatewayVersion,omitempty"`
	ServerAddress  string         `protobuf:"bytes,8,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	ServerVersion  string         `protobuf:"bytes,9,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	ClientErrors   []*ClientError `protobuf:"bytes,10,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"` // Client error information
	Ed25519        []byte         `protobuf:"bytes,11,opt,name=Ed25519,proto3" json:"Ed25519,omitempty"`
}

func (x *PermissioningPoll) Reset() {
	*x = PermissioningPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissioningPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissioningPoll) ProtoMessage() {}

func (x *PermissioningPoll) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissioningPoll.ProtoReflect.Descriptor instead.
func (*PermissioningPoll) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{49}
}

func (x *PermissioningPoll) GetFull() *NDFHash {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *PermissioningPoll) GetPartial() *NDFHash {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *PermissioningPoll) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *PermissioningPoll) GetActivity() uint32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *PermissioningPoll) GetError() *RoundError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PermissioningPoll) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *PermissioningPoll) GetGatewayVersion() string {
	if x != nil {
		return x.GatewayVersion
	}
	return ""
}

func (x *PermissioningPoll) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *PermissioningPoll) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *PermissioningPoll) GetClientErrors() []*ClientError {
	if x != nil {
		return x.ClientErrors
	}
	return nil
}

func (x *PermissioningPoll) GetEd25519() []byte {
	if x != nil {
		return x.Ed25519
	}
	return nil
}

// Info containing error among a client
// Passed server -> Permissioning via the poll comm
type ClientError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId []byte `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Source   []byte `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"` // ID of the node that created it
}

func (x *ClientError) Reset() {
	*x = ClientError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientError) ProtoMessage() {}

func (x *ClientError) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientError.ProtoReflect.Descriptor instead.
func (*ClientError) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{50}
}

func (x *ClientError) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *ClientError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ClientError) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

// Unified Server->Permissioning polling response
type PermissionPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullNDF                *NDF         `protobuf:"bytes,1,opt,name=FullNDF,proto3" json:"FullNDF,omitempty"`                                // Empty if no update needed
	PartialNDF             *NDF         `protobuf:"bytes,2,opt,name=PartialNDF,proto3" json:"PartialNDF,omitempty"`                          // Empty if no update needed
	Updates                []*RoundInfo `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`                                // Empty if no update needed
	EarliestClientRound    uint64       `protobuf:"varint,4,opt,name=EarliestClientRound,proto3" json:"EarliestClientRound,omitempty"`       // Earliest round to track for clients
	EarliestGatewayRound   uint64       `protobuf:"varint,5,opt,name=EarliestGatewayRound,proto3" json:"EarliestGatewayRound,omitempty"`     // Earliest round to track for gateways
	EarliestRoundTimestamp int64        `protobuf:"varint,6,opt,name=EarliestRoundTimestamp,proto3" json:"EarliestRoundTimestamp,omitempty"` // The timestamp associated with the earliest the gateway still has info for
	EarliestRoundErr       string       `protobuf:"bytes,7,opt,name=EarliestRoundErr,proto3" json:"EarliestRoundErr,omitempty"`
}

func (x *PermissionPollResponse) Reset() {
	*x = PermissionPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionPollResponse) ProtoMessage() {}

func (x *PermissionPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionPollResponse.ProtoReflect.Descriptor instead.
func (*PermissionPollResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{51}
}

func (x *PermissionPollResponse) GetFullNDF() *NDF {
	if x != nil {
		return x.FullNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetPartialNDF() *NDF {
	if x != nil {
		return x.PartialNDF
	}
	return nil
}

func (x *PermissionPollResponse) GetUpdates() []*RoundInfo {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *PermissionPollResponse) GetEarliestClientRound() uint64 {
	if x != nil {
		return x.EarliestClientRound
	}
	return 0
}

func (x *PermissionPollResponse) GetEarliestGatewayRound() uint64 {
	if x != nil {
		return x.EarliestGatewayRound
	}
	return 0
}

func (x *PermissionPollResponse) GetEarliestRoundTimestamp() int64 {
	if x != nil {
		return x.EarliestRoundTimestamp
	}
	return 0
}

func (x *PermissionPollResponse) GetEarliestRoundErr() string {
	if x != nil {
		return x.EarliestRoundErr
	}
	return ""
}

// Registration token to be associated with the client
type NotificationRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                 string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	IntermediaryId        []byte `protobuf:"bytes,2,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	TransmissionRsa       []byte `protobuf:"bytes,3,opt,name=TransmissionRsa,proto3" json:"TransmissionRsa,omitempty"`
	TransmissionSalt      []byte `protobuf:"bytes,4,opt,name=TransmissionSalt,proto3" json:"TransmissionSalt,omitempty"`
	TransmissionRsaSig    []byte `protobuf:"bytes,5,opt,name=TransmissionRsaSig,proto3" json:"TransmissionRsaSig,omitempty"`
	IIDTransmissionRsaSig []byte `protobuf:"bytes,6,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
	// Timestamp in which user registered with the network (ie permissioning)
	RegistrationTimestamp int64 `protobuf:"varint,7,opt,name=RegistrationTimestamp,proto3" json:"RegistrationTimestamp,omitempty"`
}

func (x *NotificationRegisterRequest) Reset() {
	*x = NotificationRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRegisterRequest) ProtoMessage() {}

func (x *NotificationRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRegisterRequest.ProtoReflect.Descriptor instead.
func (*NotificationRegisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{52}
}

func (x *NotificationRegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NotificationRegisterRequest) GetIntermediaryId() []byte {
	if x != nil {
		return x.IntermediaryId
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionRsa() []byte {
	if x != nil {
		return x.TransmissionRsa
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionSalt() []byte {
	if x != nil {
		return x.TransmissionSalt
	}
	return nil
}

func (x *NotificationRegisterRequest) GetTransmissionRsaSig() []byte {
	if x != nil {
		return x.TransmissionRsaSig
	}
	return nil
}

func (x *NotificationRegisterRequest) GetIIDTransmissionRsaSig() []byte {
	if x != nil {
		return x.IIDTransmissionRsaSig
	}
	return nil
}

func (x *NotificationRegisterRequest) GetRegistrationTimestamp() int64 {
	if x != nil {
		return x.RegistrationTimestamp
	}
	return 0
}

type NotificationUnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntermediaryId        []byte `protobuf:"bytes,1,opt,name=IntermediaryId,proto3" json:"IntermediaryId,omitempty"`
	IIDTransmissionRsaSig []byte `protobuf:"bytes,2,opt,name=IIDTransmissionRsaSig,proto3" json:"IIDTransmissionRsaSig,omitempty"`
}

func (x *NotificationUnregisterRequest) Reset() {
	*x = NotificationUnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationUnregisterRequest) ProtoMessage() {}

func (x *NotificationUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationUnregisterRequest.ProtoReflect.Descriptor instead.
func (*NotificationUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{53}
}

func (x *NotificationUnregisterRequest) GetIntermediaryId() []byte {
	if x != nil {
		return x.IntermediaryId
	}
	return nil
}

func (x *NotificationUnregisterRequest) GetIIDTransmissionRsaSig() []byte {
	if x != nil {
		return x.IIDTransmissionRsaSig
	}
	return nil
}

// The list of user IDS for notification polling
type UserIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs [][]byte `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *UserIdList) Reset() {
	*x = UserIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdList) ProtoMessage() {}

func (x *UserIdList) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdList.ProtoReflect.Descriptor instead.
func (*UserIdList) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{54}
}

func (x *UserIdList) GetIDs() [][]byte {
	if x != nil {
		return x.IDs
	}
	return nil
}

// Notification data transmitted to the notification bot from gateway
type NotificationBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID       uint64              `protobuf:"varint,1,opt,name=roundID,proto3" json:"roundID,omitempty"`
	Notifications []*NotificationData `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *NotificationBatch) Reset() {
	*x = NotificationBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationBatch) ProtoMessage() {}

func (x *NotificationBatch) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationBatch.ProtoReflect.Descriptor instead.
func (*NotificationBatch) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{55}
}

func (x *NotificationBatch) GetRoundID() uint64 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *NotificationBatch) GetNotifications() []*NotificationData {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// Data for a single notification
type NotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EphemeralID int64  `protobuf:"varint,1,opt,name=ephemeralID,proto3" json:"ephemeralID,omitempty"`
	IdentityFP  []byte `protobuf:"bytes,2,opt,name=identityFP,proto3" json:"identityFP,omitempty"`
	MessageHash []byte `protobuf:"bytes,3,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
}

func (x *NotificationData) Reset() {
	*x = NotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationData) ProtoMessage() {}

func (x *NotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationData.ProtoReflect.Descriptor instead.
func (*NotificationData) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{56}
}

func (x *NotificationData) GetEphemeralID() int64 {
	if x != nil {
		return x.EphemeralID
	}
	return 0
}

func (x *NotificationData) GetIdentityFP() []byte {
	if x != nil {
		return x.IdentityFP
	}
	return nil
}

func (x *NotificationData) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

// Holds information for a user requesting a channel lease from UD
type ChannelLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                 []byte `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserEd25519PubKey      []byte `protobuf:"bytes,2,opt,name=UserEd25519PubKey,proto3" json:"UserEd25519PubKey,omitempty"`
	Timestamp              int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	UserPubKeyRSASignature []byte `protobuf:"bytes,4,opt,name=UserPubKeyRSASignature,proto3" json:"UserPubKeyRSASignature,omitempty"`
}

func (x *ChannelLeaseRequest) Reset() {
	*x = ChannelLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLeaseRequest) ProtoMessage() {}

func (x *ChannelLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLeaseRequest.ProtoReflect.Descriptor instead.
func (*ChannelLeaseRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{57}
}

func (x *ChannelLeaseRequest) GetUserID() []byte {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *ChannelLeaseRequest) GetUserEd25519PubKey() []byte {
	if x != nil {
		return x.UserEd25519PubKey
	}
	return nil
}

func (x *ChannelLeaseRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChannelLeaseRequest) GetUserPubKeyRSASignature() []byte {
	if x != nil {
		return x.UserPubKeyRSASignature
	}
	return nil
}

// Contains UD response to a ChannelLeaseRequest, including lease & signature
type ChannelLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease                   int64  `protobuf:"varint,1,opt,name=Lease,proto3" json:"Lease,omitempty"`
	UserEd25519PubKey       []byte `protobuf:"bytes,2,opt,name=UserEd25519PubKey,proto3" json:"UserEd25519PubKey,omitempty"`
	UDLeaseEd25519Signature []byte `protobuf:"bytes,3,opt,name=UDLeaseEd25519Signature,proto3" json:"UDLeaseEd25519Signature,omitempty"`
}

func (x *ChannelLeaseResponse) Reset() {
	*x = ChannelLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLeaseResponse) ProtoMessage() {}

func (x *ChannelLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLeaseResponse.ProtoReflect.Descriptor instead.
func (*ChannelLeaseResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{58}
}

func (x *ChannelLeaseResponse) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *ChannelLeaseResponse) GetUserEd25519PubKey() []byte {
	if x != nil {
		return x.UserEd25519PubKey
	}
	return nil
}

func (x *ChannelLeaseResponse) GetUDLeaseEd25519Signature() []byte {
	if x != nil {
		return x.UDLeaseEd25519Signature
	}
	return nil
}

// Holds information for a UDB user registration request
type UDBUserRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissioningSignature []byte               `protobuf:"bytes,1,opt,name=PermissioningSignature,proto3" json:"PermissioningSignature,omitempty"`
	RSAPublicPem           string               `protobuf:"bytes,2,opt,name=RSAPublicPem,proto3" json:"RSAPublicPem,omitempty"`
	Timestamp              int64                `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	IdentityRegistration   *Identity            `protobuf:"bytes,4,opt,name=IdentityRegistration,proto3" json:"IdentityRegistration,omitempty"`
	IdentitySignature      []byte               `protobuf:"bytes,5,opt,name=IdentitySignature,proto3" json:"IdentitySignature,omitempty"` // (RSAPublicSign(Data.Digest()))
	Frs                    *FactRegisterRequest `protobuf:"bytes,6,opt,name=frs,proto3" json:"frs,omitempty"`
	UID                    []byte               `protobuf:"bytes,7,opt,name=UID,proto3" json:"UID,omitempty"`
}

func (x *UDBUserRegistration) Reset() {
	*x = UDBUserRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDBUserRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDBUserRegistration) ProtoMessage() {}

func (x *UDBUserRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDBUserRegistration.ProtoReflect.Descriptor instead.
func (*UDBUserRegistration) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{59}
}

func (x *UDBUserRegistration) GetPermissioningSignature() []byte {
	if x != nil {
		return x.PermissioningSignature
	}
	return nil
}

func (x *UDBUserRegistration) GetRSAPublicPem() string {
	if x != nil {
		return x.RSAPublicPem
	}
	return ""
}

func (x *UDBUserRegistration) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UDBUserRegistration) GetIdentityRegistration() *Identity {
	if x != nil {
		return x.IdentityRegistration
	}
	return nil
}

func (x *UDBUserRegistration) GetIdentitySignature() []byte {
	if x != nil {
		return x.IdentitySignature
	}
	return nil
}

func (x *UDBUserRegistration) GetFrs() *FactRegisterRequest {
	if x != nil {
		return x.Frs
	}
	return nil
}

func (x *UDBUserRegistration) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

// Identity describes a user and their cryptographic info
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	DhPubKey []byte `protobuf:"bytes,2,opt,name=dhPubKey,proto3" json:"dhPubKey,omitempty"`
	Salt     []byte `protobuf:"bytes,3,opt,name=Salt,proto3" json:"Salt,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{60}
}

func (x *Identity) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Identity) GetDhPubKey() []byte {
	if x != nil {
		return x.DhPubKey
	}
	return nil
}

func (x *Identity) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

// Holds information for a Fact registration request
type FactRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID     []byte `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Fact    *Fact  `protobuf:"bytes,2,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactSig []byte `protobuf:"bytes,3,opt,name=FactSig,proto3" json:"FactSig,omitempty"` // (RSAPublicSign(Fact.Digest()))
}

func (x *FactRegisterRequest) Reset() {
	*x = FactRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRegisterRequest) ProtoMessage() {}

func (x *FactRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRegisterRequest.ProtoReflect.Descriptor instead.
func (*FactRegisterRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{61}
}

func (x *FactRegisterRequest) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

func (x *FactRegisterRequest) GetFact() *Fact {
	if x != nil {
		return x.Fact
	}
	return nil
}

func (x *FactRegisterRequest) GetFactSig() []byte {
	if x != nil {
		return x.FactSig
	}
	return nil
}

// Fact describes a Fact, namely what it is and what type it is
type Fact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fact     string `protobuf:"bytes,1,opt,name=Fact,proto3" json:"Fact,omitempty"`
	FactType uint32 `protobuf:"varint,2,opt,name=FactType,proto3" json:"FactType,omitempty"`
}

func (x *Fact) Reset() {
	*x = Fact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fact) ProtoMessage() {}

func (x *Fact) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fact.ProtoReflect.Descriptor instead.
func (*Fact) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{62}
}

func (x *Fact) GetFact() string {
	if x != nil {
		return x.Fact
	}
	return ""
}

func (x *Fact) GetFactType() uint32 {
	if x != nil {
		return x.FactType
	}
	return 0
}

// FactRegisterResponse describes UDB's handling of a FactRegisterRequest request
type FactRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationID string `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
}

func (x *FactRegisterResponse) Reset() {
	*x = FactRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRegisterResponse) ProtoMessage() {}

func (x *FactRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRegisterResponse.ProtoReflect.Descriptor instead.
func (*FactRegisterResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{63}
}

func (x *FactRegisterResponse) GetConfirmationID() string {
	if x != nil {
		return x.ConfirmationID
	}
	return ""
}

// Holds information for a Fact confirmation request
type FactConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationID string `protobuf:"bytes,1,opt,name=ConfirmationID,proto3" json:"ConfirmationID,omitempty"`
	Code           string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *FactConfirmRequest) Reset() {
	*x = FactConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactConfirmRequest) ProtoMessage() {}

func (x *FactConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactConfirmRequest.ProtoReflect.Descriptor instead.
func (*FactConfirmRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{64}
}

func (x *FactConfirmRequest) GetConfirmationID() string {
	if x != nil {
		return x.ConfirmationID
	}
	return ""
}

func (x *FactConfirmRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Holds information for a Fact removal request
type FactRemovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID         []byte `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	RemovalData *Fact  `protobuf:"bytes,2,opt,name=RemovalData,proto3" json:"RemovalData,omitempty"`
	FactSig     []byte `protobuf:"bytes,3,opt,name=FactSig,proto3" json:"FactSig,omitempty"` // (RSAPublicSign(Fact.Digest()))
}

func (x *FactRemovalRequest) Reset() {
	*x = FactRemovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactRemovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactRemovalRequest) ProtoMessage() {}

func (x *FactRemovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactRemovalRequest.ProtoReflect.Descriptor instead.
func (*FactRemovalRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{65}
}

func (x *FactRemovalRequest) GetUID() []byte {
	if x != nil {
		return x.UID
	}
	return nil
}

func (x *FactRemovalRequest) GetRemovalData() *Fact {
	if x != nil {
		return x.RemovalData
	}
	return nil
}

func (x *FactRemovalRequest) GetFactSig() []byte {
	if x != nil {
		return x.FactSig
	}
	return nil
}

// For sending permission address Server -> Gateway
type StrAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *StrAddress) Reset() {
	*x = StrAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrAddress) ProtoMessage() {}

func (x *StrAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrAddress.ProtoReflect.Descriptor instead.
func (*StrAddress) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{66}
}

func (x *StrAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Describes a round
type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UpdateID                   uint64                 `protobuf:"varint,2,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	State                      uint32                 `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"` // Precomp, Standby, Realtime, Completed, Failed
	BatchSize                  uint32                 `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Topology                   [][]byte               `protobuf:"bytes,5,rep,name=Topology,proto3" json:"Topology,omitempty"`             // List of NodeIDs
	Timestamps                 []uint64               `protobuf:"varint,6,rep,packed,name=Timestamps,proto3" json:"Timestamps,omitempty"` // List of state timestamps in UTC
	Errors                     []*RoundError          `protobuf:"bytes,7,rep,name=Errors,proto3" json:"Errors,omitempty"`                 // List of round errors which occurred
	ClientErrors               []*ClientError         `protobuf:"bytes,8,rep,name=ClientErrors,proto3" json:"ClientErrors,omitempty"`
	ResourceQueueTimeoutMillis uint32                 `protobuf:"varint,9,opt,name=ResourceQueueTimeoutMillis,proto3" json:"ResourceQueueTimeoutMillis,omitempty"` // Timeout for resource queue on nodes
	Signature                  *messages.RSASignature `protobuf:"bytes,10,opt,name=Signature,proto3" json:"Signature,omitempty"`
	AddressSpaceSize           uint32                 `protobuf:"varint,11,opt,name=AddressSpaceSize,proto3" json:"AddressSpaceSize,omitempty"`
	EccSignature               *messages.ECCSignature `protobuf:"bytes,12,opt,name=EccSignature,proto3" json:"EccSignature,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{67}
}

func (x *RoundInfo) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RoundInfo) GetUpdateID() uint64 {
	if x != nil {
		return x.UpdateID
	}
	return 0
}

func (x *RoundInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RoundInfo) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *RoundInfo) GetTopology() [][]byte {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *RoundInfo) GetTimestamps() []uint64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RoundInfo) GetErrors() []*RoundError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RoundInfo) GetClientErrors() []*ClientError {
	if x != nil {
		return x.ClientErrors
	}
	return nil
}

func (x *RoundInfo) GetResourceQueueTimeoutMillis() uint32 {
	if x != nil {
		return x.ResourceQueueTimeoutMillis
	}
	return 0
}

func (x *RoundInfo) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RoundInfo) GetAddressSpaceSize() uint32 {
	if x != nil {
		return x.AddressSpaceSize
	}
	return 0
}

func (x *RoundInfo) GetEccSignature() *messages.ECCSignature {
	if x != nil {
		return x.EccSignature
	}
	return nil
}

// RoundError will be used to describe a round error
// Passed along to gateways (level 2) and clients (level 3)
type RoundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	NodeId    []byte                 `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Error     string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Signature *messages.RSASignature `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *RoundError) Reset() {
	*x = RoundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundError) ProtoMessage() {}

func (x *RoundError) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundError.ProtoReflect.Descriptor instead.
func (*RoundError) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{68}
}

func (x *RoundError) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundError) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *RoundError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RoundError) GetSignature() *messages.RSASignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type EABCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EABCredentialRequest) Reset() {
	*x = EABCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EABCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EABCredentialRequest) ProtoMessage() {}

func (x *EABCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EABCredentialRequest.ProtoReflect.Descriptor instead.
func (*EABCredentialRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{69}
}

type EABCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *EABCredentialResponse) Reset() {
	*x = EABCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EABCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EABCredentialResponse) ProtoMessage() {}

func (x *EABCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EABCredentialResponse.ProtoReflect.Descriptor instead.
func (*EABCredentialResponse) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{70}
}

func (x *EABCredentialResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EABCredentialResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AuthorizerCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwID      []byte `protobuf:"bytes,1,opt,name=GwID,proto3" json:"GwID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ACMEToken string `protobuf:"bytes,3,opt,name=ACMEToken,proto3" json:"ACMEToken,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *AuthorizerCertRequest) Reset() {
	*x = AuthorizerCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerCertRequest) ProtoMessage() {}

func (x *AuthorizerCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerCertRequest.ProtoReflect.Descriptor instead.
func (*AuthorizerCertRequest) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{71}
}

func (x *AuthorizerCertRequest) GetGwID() []byte {
	if x != nil {
		return x.GwID
	}
	return nil
}

func (x *AuthorizerCertRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AuthorizerCertRequest) GetACMEToken() string {
	if x != nil {
		return x.ACMEToken
	}
	return ""
}

func (x *AuthorizerCertRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AuthorizerAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID    []byte `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Salt      []byte `protobuf:"bytes,2,opt,name=Salt,proto3" json:"Salt,omitempty"`
	PubkeyPem []byte `protobuf:"bytes,3,opt,name=PubkeyPem,proto3" json:"PubkeyPem,omitempty"`
	TimeStamp int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuthorizerAuth) Reset() {
	*x = AuthorizerAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixmessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizerAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerAuth) ProtoMessage() {}

func (x *AuthorizerAuth) ProtoReflect() protoreflect.Message {
	mi := &file_mixmessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerAuth.ProtoReflect.Descriptor instead.
func (*AuthorizerAuth) Descriptor() ([]byte, []int) {
	return file_mixmessages_proto_rawDescGZIP(), []int{72}
}

func (x *AuthorizerAuth) GetNodeID() []byte {
	if x != nil {
		return x.NodeID
	}
	return nil
}

func (x *AuthorizerAuth) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *AuthorizerAuth) GetPubkeyPem() []byte {
	if x != nil {
		return x.PubkeyPem
	}
	return nil
}

func (x *AuthorizerAuth) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AuthorizerAuth) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_mixmessages_proto protoreflect.FileDescriptor

var file_mixmessages_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x33, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa5, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x73, 0x0a, 0x1e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x1b, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x53, 0x48, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x53, 0x48, 0x41, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x53, 0x48, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x53, 0x48, 0x41, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x48,
	0x4d, 0x41, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x4d, 0x41,
	0x43, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x48, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x58, 0x0a, 0x16, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x1a, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1a, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x75, 0x6d, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4e, 0x75, 0x6d, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x50, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x22, 0x38, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x7c, 0x0a, 0x05, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x75,
	0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x69, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xe9, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69,
	0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x07, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x44, 0x46, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x05,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x45,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x22,
	0x26, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x69, 0x65, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x22, 0x54, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x23, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x22, 0x2a, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x4a, 0x0a,
	0x18, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x6e, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5b, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x0d,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49,
	0x44, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x43, 0x79, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x43, 0x79, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43, 0x79,
	0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x43,
	0x79, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43,
	0x79, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x43, 0x79, 0x70, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53,
	0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x4d, 0x41, 0x43, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x05, 0x4b, 0x4d, 0x41, 0x43, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x45, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0b, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x46, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4e, 0x44, 0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12,
	0x30, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x73, 0x52,
	0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x82,
	0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x32, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x0b,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x4d, 0x41, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x22, 0x58, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x49, 0x70, 0x73, 0x22, 0x64, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x53, 0x22, 0x40, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x07, 0x4e, 0x44,
	0x46, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4d, 0x0a, 0x03, 0x4e, 0x44, 0x46,
	0x12, 0x10, 0x0a, 0x03, 0x4e, 0x64, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4e,
	0x64, 0x66, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x12,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x1e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53, 0x41,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa1, 0x02,
	0x0a, 0x25, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x1b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x03, 0x0a,
	0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x44, 0x46, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x22, 0x57, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x44, 0x46, 0x52, 0x07, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44,
	0x46, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x44, 0x46, 0x12, 0x30, 0x0a,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x45, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a,
	0x10, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x1b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61,
	0x53, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x12, 0x34, 0x0a,
	0x15, 0x49, 0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x49, 0x49,
	0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61,
	0x53, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x1d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x49, 0x49, 0x44, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x61, 0x53, 0x69, 0x67, 0x22, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x72, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x46, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x36, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x53,
	0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x53, 0x41, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x44, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x55, 0x44, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x13, 0x55, 0x44, 0x42, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x49, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x66, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x66, 0x72, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x55, 0x49, 0x44,
	0x22, 0x56, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x68, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x68, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x55, 0x49,
	0x44, 0x12, 0x25, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61,
	0x63, 0x74, 0x52, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x67, 0x22, 0x36, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x46, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x46, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x12, 0x46, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x12,
	0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63,
	0x74, 0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x22, 0x26, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x03, 0x0a, 0x09,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x63, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x45, 0x63, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x34, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x53,
	0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x41, 0x42, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a,
	0x15, 0x45, 0x41, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x85,
	0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x77, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x47, 0x77, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x43,
	0x4d, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x43, 0x4d, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x50,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x50, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32,
	0x96, 0x0a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x38, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x54, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19,
	0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x69, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x32, 0xc9, 0x07, 0x0a, 0x07, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x59, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x50, 0x75, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x14, 0x50, 0x75, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x04, 0x50, 0x6f,
	0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x17, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x32, 0x78, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x32, 0xb4,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x64, 0x66, 0x12, 0x14, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x44, 0x46, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x10, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x44, 0x46, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x6d,
	0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x78,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x90, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x18, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x32, 0xbe, 0x03, 0x0a, 0x03, 0x55, 0x44, 0x42,
	0x12, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55,
	0x44, 0x42, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x78, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xed, 0x01, 0x0a, 0x0a, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x41, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x21, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45,
	0x41, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x45, 0x41, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x69, 0x78, 0x78, 0x69, 0x72, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x6d, 0x69, 0x78, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mixmessages_proto_rawDescOnce sync.Once
	file_mixmessages_proto_rawDescData = file_mixmessages_proto_rawDesc
)

func file_mixmessages_proto_rawDescGZIP() []byte {
	file_mixmessages_proto_rawDescOnce.Do(func() {
		file_mixmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_mixmessages_proto_rawDescData)
	})
	return file_mixmessages_proto_rawDescData
}

var file_mixmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 73)
var file_mixmessages_proto_goTypes = []interface{}{
	(*ClientKeyRequest)(nil),                      // 0: mixmessages.ClientKeyRequest
	(*SignedClientBatchKeyRequest)(nil),           // 1: mixmessages.SignedClientBatchKeyRequest
	(*SignedClientKeyRequest)(nil),                // 2: mixmessages.SignedClientKeyRequest
	(*ClientKeyResponse)(nil),                     // 3: mixmessages.ClientKeyResponse
	(*SignedBatchKeyResponse)(nil),                // 4: mixmessages.SignedBatchKeyResponse
	(*SignedKeyResponse)(nil),                     // 5: mixmessages.SignedKeyResponse
	(*PostPrecompResult)(nil),                     // 6: mixmessages.PostPrecompResult
	(*RoundBufferInfo)(nil),                       // 7: mixmessages.RoundBufferInfo
	(*RoundPublicKey)(nil),                        // 8: mixmessages.RoundPublicKey
	(*RoundMetrics)(nil),                          // 9: mixmessages.RoundMetrics
	(*Batch)(nil),                                 // 10: mixmessages.Batch
	(*CompletedBatch)(nil),                        // 11: mixmessages.CompletedBatch
	(*BatchInfo)(nil),                             // 12: mixmessages.BatchInfo
	(*RoundTripPing)(nil),                         // 13: mixmessages.RoundTripPing
	(*ServerPoll)(nil),                            // 14: mixmessages.ServerPoll
	(*ServerPollResponse)(nil),                    // 15: mixmessages.ServerPollResponse
	(*BatchReady)(nil),                            // 16: mixmessages.BatchReady
	(*SharePiece)(nil),                            // 17: mixmessages.SharePiece
	(*RequestGatewayCert)(nil),                    // 18: mixmessages.RequestGatewayCert
	(*GatewayCertificate)(nil),                    // 19: mixmessages.GatewayCertificate
	(*StreamChunk)(nil),                           // 20: mixmessages.StreamChunk
	(*HistoricalRounds)(nil),                      // 21: mixmessages.HistoricalRounds
	(*HistoricalRoundsResponse)(nil),              // 22: mixmessages.HistoricalRoundsResponse
	(*GetMessagesBatch)(nil),                      // 23: mixmessages.GetMessagesBatch
	(*GetMessagesResponseBatch)(nil),              // 24: mixmessages.GetMessagesResponseBatch
	(*GetMessages)(nil),                           // 25: mixmessages.GetMessages
	(*GetMessagesResponse)(nil),                   // 26: mixmessages.GetMessagesResponse
	(*RoundMessages)(nil),                         // 27: mixmessages.RoundMessages
	(*IDList)(nil),                                // 28: mixmessages.IDList
	(*Slot)(nil),                                  // 29: mixmessages.Slot
	(*GatewayPoll)(nil),                           // 30: mixmessages.GatewayPoll
	(*GatewayPollResponse)(nil),                   // 31: mixmessages.GatewayPollResponse
	(*ClientBlooms)(nil),                          // 32: mixmessages.ClientBlooms
	(*ClientBloom)(nil),                           // 33: mixmessages.ClientBloom
	(*GatewaySlots)(nil),                          // 34: mixmessages.GatewaySlots
	(*GatewaySlot)(nil),                           // 35: mixmessages.GatewaySlot
	(*GatewaySlotResponse)(nil),                   // 36: mixmessages.GatewaySlotResponse
	(*BatchSenders)(nil),                          // 37: mixmessages.BatchSenders
	(*Recipients)(nil),                            // 38: mixmessages.Recipients
	(*RegisteredNodeConfirmation)(nil),            // 39: mixmessages.RegisteredNodeConfirmation
	(*RegisteredNodeCheck)(nil),                   // 40: mixmessages.RegisteredNodeCheck
	(*NDFHash)(nil),                               // 41: mixmessages.NDFHash
	(*NDF)(nil),                                   // 42: mixmessages.NDF
	(*NodeRegistration)(nil),                      // 43: mixmessages.NodeRegistration
	(*ClientRegistration)(nil),                    // 44: mixmessages.ClientRegistration
	(*ClientRegistrationConfirmation)(nil),        // 45: mixmessages.ClientRegistrationConfirmation
	(*SignedRegistrationConfirmation)(nil),        // 46: mixmessages.SignedRegistrationConfirmation
	(*SignedClientRegistrationConfirmations)(nil), // 47: mixmessages.SignedClientRegistrationConfirmations
	(*ClientVersion)(nil),                         // 48: mixmessages.ClientVersion
	(*PermissioningPoll)(nil),                     // 49: mixmessages.PermissioningPoll
	(*ClientError)(nil),                           // 50: mixmessages.ClientError
	(*PermissionPollResponse)(nil),                // 51: mixmessages.PermissionPollResponse
	(*NotificationRegisterRequest)(nil),           // 52: mixmessages.NotificationRegisterRequest
	(*NotificationUnregisterRequest)(nil),         // 53: mixmessages.NotificationUnregisterRequest
	(*UserIdList)(nil),                            // 54: mixmessages.UserIdList
	(*NotificationBatch)(nil),                     // 55: mixmessages.NotificationBatch
	(*NotificationData)(nil),                      // 56: mixmessages.NotificationData
	(*ChannelLeaseRequest)(nil),                   // 57: mixmessages.ChannelLeaseRequest
	(*ChannelLeaseResponse)(nil),                  // 58: mixmessages.ChannelLeaseResponse
	(*UDBUserRegistration)(nil),                   // 59: mixmessages.UDBUserRegistration
	(*Identity)(nil),                              // 60: mixmessages.Identity
	(*FactRegisterRequest)(nil),                   // 61: mixmessages.FactRegisterRequest
	(*Fact)(nil),                                  // 62: mixmessages.Fact
	(*FactRegisterResponse)(nil),                  // 63: mixmessages.FactRegisterResponse
	(*FactConfirmRequest)(nil),                    // 64: mixmessages.FactConfirmRequest
	(*FactRemovalRequest)(nil),                    // 65: mixmessages.FactRemovalRequest
	(*StrAddress)(nil),                            // 66: mixmessages.StrAddress
	(*RoundInfo)(nil),                             // 67: mixmessages.RoundInfo
	(*RoundError)(nil),                            // 68: mixmessages.RoundError
	(*EABCredentialRequest)(nil),                  // 69: mixmessages.EABCredentialRequest
	(*EABCredentialResponse)(nil),                 // 70: mixmessages.EABCredentialResponse
	(*AuthorizerCertRequest)(nil),                 // 71: mixmessages.AuthorizerCertRequest
	(*AuthorizerAuth)(nil),                        // 72: mixmessages.AuthorizerAuth
	(*messages.RSASignature)(nil),                 // 73: messages.RSASignature
	(*anypb.Any)(nil),                             // 74: google.protobuf.Any
	(*messages.ECCSignature)(nil),                 // 75: messages.ECCSignature
	(*messages.AuthenticatedMessage)(nil),         // 76: messages.AuthenticatedMessage
	(*messages.Ping)(nil),                         // 77: messages.Ping
	(*messages.Ack)(nil),                          // 78: messages.Ack
}
var file_mixmessages_proto_depIdxs = []int32{
	46,  // 0: mixmessages.ClientKeyRequest.ClientTransmissionConfirmation:type_name -> mixmessages.SignedRegistrationConfirmation
	73,  // 1: mixmessages.SignedClientBatchKeyRequest.ClientKeyRequestSignature:type_name -> messages.RSASignature
	73,  // 2: mixmessages.SignedClientKeyRequest.ClientKeyRequestSignature:type_name -> messages.RSASignature
	5,   // 3: mixmessages.SignedBatchKeyResponse.SignedKeys:type_name -> mixmessages.SignedKeyResponse
	73,  // 4: mixmessages.SignedKeyResponse.KeyResponseSignedByGateway:type_name -> messages.RSASignature
	67,  // 5: mixmessages.RoundPublicKey.Round:type_name -> mixmessages.RoundInfo
	67,  // 6: mixmessages.Batch.Round:type_name -> mixmessages.RoundInfo
	29,  // 7: mixmessages.Batch.slots:type_name -> mixmessages.Slot
	29,  // 8: mixmessages.CompletedBatch.slots:type_name -> mixmessages.Slot
	67,  // 9: mixmessages.BatchInfo.Round:type_name -> mixmessages.RoundInfo
	74,  // 10: mixmessages.RoundTripPing.Payload:type_name -> google.protobuf.Any
	67,  // 11: mixmessages.RoundTripPing.Round:type_name -> mixmessages.RoundInfo
	41,  // 12: mixmessages.ServerPoll.Full:type_name -> mixmessages.NDFHash
	41,  // 13: mixmessages.ServerPoll.Partial:type_name -> mixmessages.NDFHash
	42,  // 14: mixmessages.ServerPollResponse.FullNDF:type_name -> mixmessages.NDF
	42,  // 15: mixmessages.ServerPollResponse.PartialNDF:type_name -> mixmessages.NDF
	67,  // 16: mixmessages.ServerPollResponse.Updates:type_name -> mixmessages.RoundInfo
	67,  // 17: mixmessages.ServerPollResponse.BatchRequest:type_name -> mixmessages.RoundInfo
	16,  // 18: mixmessages.ServerPollResponse.Batch:type_name -> mixmessages.BatchReady
	73,  // 19: mixmessages.SharePiece.Signature:type_name -> messages.RSASignature
	67,  // 20: mixmessages.HistoricalRoundsResponse.Rounds:type_name -> mixmessages.RoundInfo
	25,  // 21: mixmessages.GetMessagesBatch.Requests:type_name -> mixmessages.GetMessages
	26,  // 22: mixmessages.GetMessagesResponseBatch.Results:type_name -> mixmessages.GetMessagesResponse
	29,  // 23: mixmessages.GetMessagesResponse.Messages:type_name -> mixmessages.Slot
	29,  // 24: mixmessages.RoundMessages.Messages:type_name -> mixmessages.Slot
	41,  // 25: mixmessages.GatewayPoll.Partial:type_name -> mixmessages.NDFHash
	42,  // 26: mixmessages.GatewayPollResponse.PartialNDF:type_name -> mixmessages.NDF
	67,  // 27: mixmessages.GatewayPollResponse.Updates:type_name -> mixmessages.RoundInfo
	32,  // 28: mixmessages.GatewayPollResponse.Filters:type_name -> mixmessages.ClientBlooms
	33,  // 29: mixmessages.ClientBlooms.Filters:type_name -> mixmessages.ClientBloom
	35,  // 30: mixmessages.GatewaySlots.Messages:type_name -> mixmessages.GatewaySlot
	29,  // 31: mixmessages.GatewaySlot.Message:type_name -> mixmessages.Slot
	73,  // 32: mixmessages.NDF.Signature:type_name -> messages.RSASignature
	73,  // 33: mixmessages.SignedRegistrationConfirmation.RegistrarSignature:type_name -> messages.RSASignature
	46,  // 34: mixmessages.SignedClientRegistrationConfirmations.ClientTransmissionConfirmation:type_name -> mixmessages.SignedRegistrationConfirmation
	46,  // 35: mixmessages.SignedClientRegistrationConfirmations.ClientReceptionConfirmation:type_name -> mixmessages.SignedRegistrationConfirmation
	41,  // 36: mixmessages.PermissioningPoll.Full:type_name -> mixmessages.NDFHash
	41,  // 37: mixmessages.PermissioningPoll.Partial:type_name -> mixmessages.NDFHash
	68,  // 38: mixmessages.PermissioningPoll.Error:type_name -> mixmessages.RoundError
	50,  // 39: mixmessages.PermissioningPoll.ClientErrors:type_name -> mixmessages.ClientError
	42,  // 40: mixmessages.PermissionPollResponse.FullNDF:type_name -> mixmessages.NDF
	42,  // 41: mixmessages.PermissionPollResponse.PartialNDF:type_name -> mixmessages.NDF
	67,  // 42: mixmessages.PermissionPollResponse.Updates:type_name -> mixmessages.RoundInfo
	56,  // 43: mixmessages.NotificationBatch.notifications:type_name -> mixmessages.NotificationData
	60,  // 44: mixmessages.UDBUserRegistration.IdentityRegistration:type_name -> mixmessages.Identity
	61,  // 45: mixmessages.UDBUserRegistration.frs:type_name -> mixmessages.FactRegisterRequest
	62,  // 46: mixmessages.FactRegisterRequest.Fact:type_name -> mixmessages.Fact
	62,  // 47: mixmessages.FactRemovalRequest.RemovalData:type_name -> mixmessages.Fact
	68,  // 48: mixmessages.RoundInfo.Errors:type_name -> mixmessages.RoundError
	50,  // 49: mixmessages.RoundInfo.ClientErrors:type_name -> mixmessages.ClientError
	73,  // 50: mixmessages.RoundInfo.Signature:type_name -> messages.RSASignature
	75,  // 51: mixmessages.RoundInfo.EccSignature:type_name -> messages.ECCSignature
	73,  // 52: mixmessages.RoundError.Signature:type_name -> messages.RSASignature
	76,  // 53: mixmessages.Node.AskOnline:input_type -> messages.AuthenticatedMessage
	76,  // 54: mixmessages.Node.CreateNewRound:input_type -> messages.AuthenticatedMessage
	29,  // 55: mixmessages.Node.UploadUnmixedBatch:input_type -> mixmessages.Slot
	29,  // 56: mixmessages.Node.FinishRealtime:input_type -> mixmessages.Slot
	29,  // 57: mixmessages.Node.PrecompTestBatch:input_type -> mixmessages.Slot
	76,  // 58: mixmessages.Node.PostPhase:input_type -> messages.AuthenticatedMessage
	29,  // 59: mixmessages.Node.StreamPostPhase:input_type -> mixmessages.Slot
	76,  // 60: mixmessages.Node.GetRoundBufferInfo:input_type -> messages.AuthenticatedMessage
	76,  // 61: mixmessages.Node.RequestClientKey:input_type -> messages.AuthenticatedMessage
	76,  // 62: mixmessages.Node.PostPrecompResult:input_type -> messages.AuthenticatedMessage
	76,  // 63: mixmessages.Node.GetMeasure:input_type -> messages.AuthenticatedMessage
	76,  // 64: mixmessages.Node.Poll:input_type -> messages.AuthenticatedMessage
	76,  // 65: mixmessages.Node.DownloadMixedBatch:input_type -> messages.AuthenticatedMessage
	76,  // 66: mixmessages.Node.SendRoundTripPing:input_type -> messages.AuthenticatedMessage
	76,  // 67: mixmessages.Node.RoundError:input_type -> messages.AuthenticatedMessage
	77,  // 68: mixmessages.Node.GetPermissioningAddress:input_type -> messages.Ping
	76,  // 69: mixmessages.Node.StartSharePhase:input_type -> messages.AuthenticatedMessage
	76,  // 70: mixmessages.Node.SharePhaseRound:input_type -> messages.AuthenticatedMessage
	76,  // 71: mixmessages.Node.ShareFinalKey:input_type -> messages.AuthenticatedMessage
	2,   // 72: mixmessages.Gateway.RequestClientKey:input_type -> mixmessages.SignedClientKeyRequest
	1,   // 73: mixmessages.Gateway.BatchNodeRegistration:input_type -> mixmessages.SignedClientBatchKeyRequest
	35,  // 74: mixmessages.Gateway.PutMessage:input_type -> mixmessages.GatewaySlot
	34,  // 75: mixmessages.Gateway.PutManyMessages:input_type -> mixmessages.GatewaySlots
	76,  // 76: mixmessages.Gateway.PutMessageProxy:input_type -> messages.AuthenticatedMessage
	76,  // 77: mixmessages.Gateway.PutManyMessagesProxy:input_type -> messages.AuthenticatedMessage
	30,  // 78: mixmessages.Gateway.Poll:input_type -> mixmessages.GatewayPoll
	21,  // 79: mixmessages.Gateway.RequestHistoricalRounds:input_type -> mixmessages.HistoricalRounds
	25,  // 80: mixmessages.Gateway.RequestMessages:input_type -> mixmessages.GetMessages
	23,  // 81: mixmessages.Gateway.RequestBatchMessages:input_type -> mixmessages.GetMessagesBatch
	18,  // 82: mixmessages.Gateway.RequestTlsCert:input_type -> mixmessages.RequestGatewayCert
	44,  // 83: mixmessages.ClientRegistrar.RegisterUser:input_type -> mixmessages.ClientRegistration
	43,  // 84: mixmessages.Registration.RegisterNode:input_type -> mixmessages.NodeRegistration
	41,  // 85: mixmessages.Registration.PollNdf:input_type -> mixmessages.NDFHash
	76,  // 86: mixmessages.Registration.Poll:input_type -> messages.AuthenticatedMessage
	40,  // 87: mixmessages.Registration.CheckRegistration:input_type -> mixmessages.RegisteredNodeCheck
	53,  // 88: mixmessages.NotificationBot.UnregisterForNotifications:input_type -> mixmessages.NotificationUnregisterRequest
	52,  // 89: mixmessages.NotificationBot.RegisterForNotifications:input_type -> mixmessages.NotificationRegisterRequest
	76,  // 90: mixmessages.NotificationBot.ReceiveNotificationBatch:input_type -> messages.AuthenticatedMessage
	59,  // 91: mixmessages.UDB.RegisterUser:input_type -> mixmessages.UDBUserRegistration
	65,  // 92: mixmessages.UDB.RemoveUser:input_type -> mixmessages.FactRemovalRequest
	61,  // 93: mixmessages.UDB.RegisterFact:input_type -> mixmessages.FactRegisterRequest
	64,  // 94: mixmessages.UDB.ConfirmFact:input_type -> mixmessages.FactConfirmRequest
	65,  // 95: mixmessages.UDB.RemoveFact:input_type -> mixmessages.FactRemovalRequest
	57,  // 96: mixmessages.UDB.RequestChannelLease:input_type -> mixmessages.ChannelLeaseRequest
	72,  // 97: mixmessages.Authorizer.Authorize:input_type -> mixmessages.AuthorizerAuth
	71,  // 98: mixmessages.Authorizer.RequestCert:input_type -> mixmessages.AuthorizerCertRequest
	69,  // 99: mixmessages.Authorizer.RequestEABCredentials:input_type -> mixmessages.EABCredentialRequest
	78,  // 100: mixmessages.Node.AskOnline:output_type -> messages.Ack
	78,  // 101: mixmessages.Node.CreateNewRound:output_type -> messages.Ack
	78,  // 102: mixmessages.Node.UploadUnmixedBatch:output_type -> messages.Ack
	78,  // 103: mixmessages.Node.FinishRealtime:output_type -> messages.Ack
	78,  // 104: mixmessages.Node.PrecompTestBatch:output_type -> messages.Ack
	78,  // 105: mixmessages.Node.PostPhase:output_type -> messages.Ack
	78,  // 106: mixmessages.Node.StreamPostPhase:output_type -> messages.Ack
	7,   // 107: mixmessages.Node.GetRoundBufferInfo:output_type -> mixmessages.RoundBufferInfo
	5,   // 108: mixmessages.Node.RequestClientKey:output_type -> mixmessages.SignedKeyResponse
	78,  // 109: mixmessages.Node.PostPrecompResult:output_type -> messages.Ack
	9,   // 110: mixmessages.Node.GetMeasure:output_type -> mixmessages.RoundMetrics
	15,  // 111: mixmessages.Node.Poll:output_type -> mixmessages.ServerPollResponse
	29,  // 112: mixmessages.Node.DownloadMixedBatch:output_type -> mixmessages.Slot
	78,  // 113: mixmessages.Node.SendRoundTripPing:output_type -> messages.Ack
	78,  // 114: mixmessages.Node.RoundError:output_type -> messages.Ack
	66,  // 115: mixmessages.Node.GetPermissioningAddress:output_type -> mixmessages.StrAddress
	78,  // 116: mixmessages.Node.StartSharePhase:output_type -> messages.Ack
	78,  // 117: mixmessages.Node.SharePhaseRound:output_type -> messages.Ack
	78,  // 118: mixmessages.Node.ShareFinalKey:output_type -> messages.Ack
	5,   // 119: mixmessages.Gateway.RequestClientKey:output_type -> mixmessages.SignedKeyResponse
	4,   // 120: mixmessages.Gateway.BatchNodeRegistration:output_type -> mixmessages.SignedBatchKeyResponse
	36,  // 121: mixmessages.Gateway.PutMessage:output_type -> mixmessages.GatewaySlotResponse
	36,  // 122: mixmessages.Gateway.PutManyMessages:output_type -> mixmessages.GatewaySlotResponse
	36,  // 123: mixmessages.Gateway.PutMessageProxy:output_type -> mixmessages.GatewaySlotResponse
	36,  // 124: mixmessages.Gateway.PutManyMessagesProxy:output_type -> mixmessages.GatewaySlotResponse
	20,  // 125: mixmessages.Gateway.Poll:output_type -> mixmessages.StreamChunk
	22,  // 126: mixmessages.Gateway.RequestHistoricalRounds:output_type -> mixmessages.HistoricalRoundsResponse
	26,  // 127: mixmessages.Gateway.RequestMessages:output_type -> mixmessages.GetMessagesResponse
	24,  // 128: mixmessages.Gateway.RequestBatchMessages:output_type -> mixmessages.GetMessagesResponseBatch
	19,  // 129: mixmessages.Gateway.RequestTlsCert:output_type -> mixmessages.GatewayCertificate
	47,  // 130: mixmessages.ClientRegistrar.RegisterUser:output_type -> mixmessages.SignedClientRegistrationConfirmations
	78,  // 131: mixmessages.Registration.RegisterNode:output_type -> messages.Ack
	42,  // 132: mixmessages.Registration.PollNdf:output_type -> mixmessages.NDF
	51,  // 133: mixmessages.Registration.Poll:output_type -> mixmessages.PermissionPollResponse
	39,  // 134: mixmessages.Registration.CheckRegistration:output_type -> mixmessages.RegisteredNodeConfirmation
	78,  // 135: mixmessages.NotificationBot.UnregisterForNotifications:output_type -> messages.Ack
	78,  // 136: mixmessages.NotificationBot.RegisterForNotifications:output_type -> messages.Ack
	78,  // 137: mixmessages.NotificationBot.ReceiveNotificationBatch:output_type -> messages.Ack
	78,  // 138: mixmessages.UDB.RegisterUser:output_type -> messages.Ack
	78,  // 139: mixmessages.UDB.RemoveUser:output_type -> messages.Ack
	63,  // 140: mixmessages.UDB.RegisterFact:output_type -> mixmessages.FactRegisterResponse
	78,  // 141: mixmessages.UDB.ConfirmFact:output_type -> messages.Ack
	78,  // 142: mixmessages.UDB.RemoveFact:output_type -> messages.Ack
	58,  // 143: mixmessages.UDB.RequestChannelLease:output_type -> mixmessages.ChannelLeaseResponse
	78,  // 144: mixmessages.Authorizer.Authorize:output_type -> messages.Ack
	78,  // 145: mixmessages.Authorizer.RequestCert:output_type -> messages.Ack
	70,  // 146: mixmessages.Authorizer.RequestEABCredentials:output_type -> mixmessages.EABCredentialResponse
	100, // [100:147] is the sub-list for method output_type
	53,  // [53:100] is the sub-list for method input_type
	53,  // [53:53] is the sub-list for extension type_name
	53,  // [53:53] is the sub-list for extension extendee
	0,   // [0:53] is the sub-list for field type_name
}

func init() { file_mixmessages_proto_init() }
func file_mixmessages_proto_init() {
	if File_mixmessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mixmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedClientBatchKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedClientKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBatchKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPrecompResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundBufferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletedBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundTripPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharePiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGatewayCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRoundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesResponseBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBlooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBloom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSenders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredNodeConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredNodeCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDFHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedRegistrationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedClientRegistrationConfirmations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissioningPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationUnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDBUserRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactRemovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EABCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EABCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixmessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizerAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mixmessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   73,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_mixmessages_proto_goTypes,
		DependencyIndexes: file_mixmessages_proto_depIdxs,
		MessageInfos:      file_mixmessages_proto_msgTypes,
	}.Build()
	File_mixmessages_proto = out.File
	file_mixmessages_proto_rawDesc = nil
	file_mixmessages_proto_goTypes = nil
	file_mixmessages_proto_depIdxs = nil
}
